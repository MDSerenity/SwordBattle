//-------------------------------------------------
// Sword Battle Core Weapon Script v1.02
// 2/2015 Vega Xue
//--------------------------------------------

//------------ADJUSTABLE------------------------
float   BulletVelocity   = 15.0; //Sword Bullet Speed
float   AttackDelay = 0.30; //Delay between attacks
vector AimOffset;
vector AimOffsetConstant = <0.0, 0.0, 0.84>;
//------------OBJECT NAMES-------------------------------
string  BulletName = "SwordBullet";
string AttackSound = "Gasp Male";
string HoldAnim = "hold_R_handgun";
//------------ENABLE/DISABLE FLAGS-----------------------
integer SoundEnabled = 1;
integer Armed;
//------------ALIAS--------------------------------------
integer GripType = ATTACH_RHAND;
//------------MESSAGES-----------------------------------
string GripTypeMessage = "this weapon only fits in your right hand";
//------------DEBUG--------------------------------------
integer PermGranted;





//------------UNSORTED-----------------------------------
float Stamina;
integer Armor;
integer ApplyStaminaDrain = 0;

//-----------FLAGS---------------------------------------
integer Blocking = 0;
integer BlockDisabled = 0;
integer AttackDisabled = 0;
integer SpecialDisabled = 0;
integer DashDisabled = 0;
integer FlyDisabled = 0;
integer HighJumpDisabled = 0;
integer MovementDisabled = 0;
//----------Input Control Flags--------------------------
integer LMouseDown;
integer ADown;
integer SDown;
integer DDown;
integer WDown;
integer EDown;
integer CDown;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~FUNCTIONS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
//Function to get required permissions from an avatar
integer getPerms()
{
    integer perms = llGetPermissions()
            | PERMISSION_TAKE_CONTROLS
            | PERMISSION_TRIGGER_ANIMATION
            | PERMISSION_ATTACH
            | PERMISSION_TRACK_CAMERA;
    llRequestPermissions(llGetOwner(), perms);
    return(perms);
}

integer takeControls(integer permissions){
     if(PERMISSION_TAKE_CONTROLS & permissions)
        {
            llTakeControls(
                            CONTROL_FWD |
                            CONTROL_BACK |
                            CONTROL_LEFT |
                            CONTROL_RIGHT |
                            CONTROL_ROT_LEFT |
                            CONTROL_ROT_RIGHT |
                            CONTROL_UP |
                            CONTROL_DOWN |
                            CONTROL_LBUTTON |
                            CONTROL_ML_LBUTTON |
                            0, TRUE, FALSE);
                            // | 0 is for edit convenience,
                            // it does not change the mask.
        }
   return(0); 
}

//Function to take avatar controls in mouselook
arm() {
    integer perm = PERMISSION_TAKE_CONTROLS | PERMISSION_TRIGGER_ANIMATION;
    if ((llGetPermissions() & perm) != perm ) {
        getPerms();
    } else {
        takeControls(perm);
        //llTakeControls(CONTROL_ML_LBUTTON, TRUE, FALSE);
        llStartAnimation(HoldAnim);
        Armed = TRUE;
    }
}

//Function to release avatar controls when finished
disarm() {
    if(llGetAgentSize(llGetPermissionsKey()) != ZERO_VECTOR){
        llStopAnimation(HoldAnim);
    }
    llReleaseControls();
    Armed = FALSE;
}
//Function to handle controls
integer controlMode(key avatar, integer levels, integer edges){
    
    // mouse clicked down
    if ((levels & CONTROL_ML_LBUTTON) && (edges & CONTROL_ML_LBUTTON)) {
        LMouseDown = 1;
        //llSay(0, "Mouse Down1");
        if ((levels & CONTROL_LEFT) && (edges & CONTROL_LEFT)) {
           // llSay(0, "Slash left");
        }else{
            //llSay(0, "READY STANCE");
        }
    }
    // mouse release
    if (!(levels & CONTROL_ML_LBUTTON) && (edges & CONTROL_ML_LBUTTON)) {
        LMouseDown = 0;
        /*if (SoundEnabled) llTriggerSound(AttackSound, 1.0);
            rotation rot = llGetRot();
            vector aim = llRot2Fwd(rot);
            vector pos = llGetPos() + AimOffset + (aim * 1.0);
            llRezObject(BulletName, pos, aim * BulletVelocity, rot, 0);*/
        disarm();
        if ((levels & CONTROL_LEFT) && (edges & CONTROL_LEFT)) {
            //llSay(0, "Move Left");
        }else{
            llSay(0, "STANDING");
        }
    }
//[01:09] Ⓡⓐⓘ (raino.tenk): if((change & held & CONTROL_ROT_RIGHT) | (change & ~held & CONTROL_RIGHT))*/
    // mouse held down
    if ((levels & CONTROL_ML_LBUTTON) && !(edges & CONTROL_ML_LBUTTON)) {
        LMouseDown = 1;
        arm();
        if ((levels & CONTROL_LEFT) && (edges & CONTROL_LEFT)) {
            llSay(0, "Slash left");
        }else{
            if ((levels & CONTROL_RIGHT) && (edges & CONTROL_RIGHT)) {
                llSay(0, "Slash Right");
            }else{
            }
            llSay(0, "READY STANCE");
        }
    } 
    return(0);
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~STATES~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
default
{
    state_entry()
    {
        //-------------------------------------------------------
        // Reset the sword and all values
        //------------------------------------------------------
        Stamina = 100.0;
        
        //Establish Permissions
        if ( llGetAttached() ){
            PermGranted = getPerms();
        }
    }
    run_time_permissions(integer perms)
    {
         //  ensure ALL required permissions have been granted
        if (PermGranted)
        {
            takeControls(perms); //llTakeControls(CONTROL_ML_LBUTTON, TRUE, FALSE);
        }
        if (perms & (PERMISSION_TAKE_CONTROLS | PERMISSION_TRIGGER_ANIMATION | PERMISSION_ATTACH)) {
            if (!llGetAttached()) {
                llAttachToAvatar(GripType);
            } else if (llGetAttached() != GripType) {
                llSay(0, GripTypeMessage);
                llDetachFromAvatar();
            } else {
                arm();
            }
        } else {
            llSay(0, "insufficient permissions");
            if (llGetAttached()) llDetachFromAvatar();
        }
    }
    attach(key avatar)
    {
        if (avatar)
           PermGranted = getPerms();
        else
        {
            //llStopAnimation(gShootAnimation);
            llReleaseControls();
        }
        if (avatar != NULL_KEY) {
            // attaching
            vector size = llGetAgentSize(avatar);
            AimOffset = AimOffsetConstant;
            AimOffset.z *= size.z / 2.0;
            getPerms();
        } else {
            // detaching
            if (Armed) disarm();
        }
    }
    changed(integer change)
    {
        if (change & (CHANGED_OWNER | CHANGED_INVENTORY) )
            llResetScript();
    }
    control(key avatar, integer levels, integer edges)
    {
        //Switch to standing position after initialization
        state Standing;  
       //controlMode(avatar, levels, edges);
    }
}
state Defending{
    state_entry()
    {
       //Place in block mode; disable attacking; disable movement
       Blocking = 1;
       AttackDisabled = 1;
       SpecialDisabled = 1;
       DashDisabled = 1;
       HighJumpDisabled = 1;
       MovementDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }     
}

state Attacking{
     state_entry()
    {
        //Place in attack mode; disable block;Disable Special; disable movement
        Blocking = 0;
        BlockDisabled = 1;
        SpecialDisabled = 1;
        DashDisabled = 1;
        HighJumpDisabled = 1;
        MovementDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }     
}
state Special{
    state_entry()
    {
        //Place in special mode on a timer; disable block; disable attack; disable movement
        Blocking = 0;
        BlockDisabled = 1;
        AttackDisabled = 1;
        DashDisabled = 1;
        HighJumpDisabled = 1;
        MovementDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }     
}
state Dash{
    state_entry()
    {
       //Disable Block attack and movement on a timer; move quickly in the aformentioned direction
       Blocking = 0;
       BlockDisabled = 1;
       AttackDisabled = 1;
       SpecialDisabled = 1;
       FlyDisabled = 1;
       HighJumpDisabled = 1;
       MovementDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }     
}
state HighJump{
    state_entry()
    {
      //Disable Block and attack on a timer; then move high quickly on the same timer
      Blocking = 0;
      BlockDisabled = 1;
      AttackDisabled = 1;
      SpecialDisabled = 1;
      DashDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }      
}
state Fly{
    state_entry()
    {
       //Drain Stamina up to 50% on a timer, allow vertical movement
        ApplyStaminaDrain = 50;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }     
}
state Standing{
    //Neutral State (default on weapon initialization)
    state_entry()
    {
       Blocking = 0;
    }
    run_time_permissions(integer perms)
    {
         //  ensure ALL required permissions have been granted
        if (PermGranted)
        {
            takeControls(perms); //llTakeControls(CONTROL_ML_LBUTTON, TRUE, FALSE);
        }
    }
    touch_start(integer count)
    {
        if (llDetectedKey(0) != llGetOwner()) {
            return;
        } else if (!llGetAttached()) {
            getPerms();
        } else if (Armed) {
            disarm();
            llOwnerSay("Disarmed");
            //**THERE IS NO FUNCTION TO REATTACH TO ANOTHER LOCATION(Requires sheath?)
            //llDetachFromAvatar();
            //llAttachToAvatar(ATTACH_BACK);
        } else {
            arm();
            llOwnerSay("Armed");
             //**THERE IS NO FUNCTION TO REATTACH TO ANOTHER LOCATION(Requires sheath?)
            //llDetachFromAvatar();
            //llAttachToAvatar(ATTACH_RHAND);
        }
    } 
    changed(integer change)
    {
        if (change & (CHANGED_OWNER | CHANGED_INVENTORY) )
            llResetScript();
    }
    control(key avatar, integer levels, integer edges)
    {
        arm();
        controlMode(avatar, levels, edges);
    }     
}
state Dead{
    state_entry()
    {
       //Collapse; disable block; attack; special; jump; movement on a timer
       Blocking = 0;
       BlockDisabled = 1;
       AttackDisabled = 1;
       SpecialDisabled = 1;
       DashDisabled = 1;
       FlyDisabled = 1;
       HighJumpDisabled = 1;
       MovementDisabled = 1;
    }
    control(key avatar, integer levels, integer edges)
    {
        controlMode(avatar, levels, edges);
    }    
}
